{"version":3,"sources":["Components/Business/Business.js","Components/BusinessList/BusinessList.js","Components/Searchbar/Searchbar.js","util/Yelp.js","util/Randomizer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","href","this","props","business","url","src","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","Searchbar","term","location","sortBy","price","handleTermChange","bind","handleLocationChange","handlePriceChange","handleSearch","event","newTerm","target","value","setState","newPrice","newLocation","searchYelp","preventDefault","sortByOption","placeholder","onChange","onClick","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","Randomizer","randomize","randomIndices","length","i","newIndex","Math","floor","random","push","indices","Array","from","Set","tempBusinesses","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0903286c.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n//HTML for properly displaying businesses\n    render(){\n        return(\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <a href={this.props.business.url} >\n                        <img src={this.props.business.imageSrc} alt=''/>\n                    </a>\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{this.props.business.address}</p>\n                        <p>{this.props.business.city}</p>\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\n                     </div>\n                    <div className=\"Business-reviews\">\n                        <p className = \"category\">{this.props.business.category.toUpperCase()}</p>\n                        <p className=\"rating\">{`${this.props.business.rating} stars`}</p>\n                        <p>{`${this.props.business.reviewCount} reviews`}</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component { //renders businesses in proper format\n    render(){\n        return(\n            <div className=\"BusinessList\">\n                {\n                    this.props.businesses.map(business => {\n                    return <Business business={business} key={business.id} />\n                    })\n                }\n            </div>\n\n        );\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './Searchbar.css';\n\nclass Searchbar extends React.Component {\n    constructor(props){\n        super(props); //initial state\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match', //sortby should always be best_match\n            price: ''\n        };\n        this.handleTermChange = this.handleTermChange.bind(this); //bind methods to be able to use this.\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handlePriceChange = this.handlePriceChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    handleTermChange(event){ //term change handler\n        let newTerm = event.target.value;\n        this.setState({term: newTerm});\n    }\n\n    handlePriceChange(event){ //price change handler\n        let newPrice = event.target.value;\n        this.setState({price: newPrice});\n    }\n\n    handleLocationChange(event){ //location change handler\n        let newLocation = event.target.value;\n        this.setState({location: newLocation});\n\n    }\n\n    handleSearch(event){ //new Search event handler\n        this.props.searchYelp(this.state.term, this.state.location, this.state.price, this.state.sortBy); //calls prop\n        event.preventDefault();\n    }\n    getSortByClass(sortByOption){ //unused method \n        if(this.state.sortBy === sortByOption){\n            return 'active';\n        } else {\n            return '';\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"Searchbar\">\n                <div className=\"Logo\">\n                    <img className=\"logo-image\" src=\"https://www.gannett-cdn.com/-mm-/c8dac0cd22f6b4730ca34d62cb389b1cca7e953b/c=0-14-2284-1299/local/-/media/2020/02/28/USATODAY/usatsports/gettyimages-1154896831.jpg?auto=webp&format=pjpg&width=1200\" />\n                    </div>\n                <div className=\"Searchbar-fields\">\n                    <select name=\"cars\" id=\"cars\" placeholder=\"Enter number of $ signs\" onChange={this.handlePriceChange}>\n                        <option value=\"1\">$</option>\n                        <option value=\"2\">$$</option>\n                        <option value=\"3\">$$$</option>\n                        <option value=\"4\">$$$$</option>\n                        </select>\n                     <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\n                     <input placeholder=\"Specifics? (Optional)\" onChange={this.handleTermChange} />\n                </div>\n                <div className=\"Searchbar-submit\">\n                    <a onClick={this.handleSearch}>Random Search!</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Searchbar;","const apiKey = 'gIS2bky6C22GUR0ck0u77cEMP_7N4miNpZgy5bs1uUzHpIUZE_jT4tyMw4w34QCAz8IbAwvuB2vIrSLxSNPaTRyxrZofAztqSwkr2jmRz_IyPHvwnhw-mFurFmo3X3Yx';\n\nconst open = true; //checks for open restaurants\nconst noOfBusinesses = 50; //max amount of restaurants from yelp API call\nconst Yelp = {\n  search(term, location, price, sortBy) {\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&price=${price}&sort_by=${sortBy}&open_now=${open}&limit=${noOfBusinesses}`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse.businesses) {\n        return jsonResponse.businesses.map(business => ({\n          id: business.id,\n          imageSrc: business.image_url,\n          name: business.name,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          category: business.categories[0].title,\n          rating: business.rating,\n          reviewCount: business.review_count,\n          url: business.url\n        }));\n      }\n    });\n  }\n};\n\nexport default Yelp;\n","const Randomizer = {\n    randomize(businesses){\n        let randomIndices = [];\n        if(businesses.length >= 10){ //returns an array of 10 or less businesses\n            for(let i = 0; i < 10; i++){\n                let newIndex = (Math.floor(Math.random() * businesses.length));\n                randomIndices.push(newIndex);\n            }\n        } else {\n            for(let i = 0; i < businesses.length; i++){\n                let newIndex = (Math.floor(Math.random() * businesses.length));\n                randomIndices.push(newIndex);\n            }\n        }\n\n        let indices = Array.from(new Set(randomIndices)); //accounts for duplicates but shortens list\n\n        let tempBusinesses = [];\n        for(let i = 0; i < indices.length; i++){\n            tempBusinesses.push(businesses[indices[i]]);\n            //push businesses randomly from api data to new array\n        }\n        return tempBusinesses;\n    }\n}\n\nexport default Randomizer","import React from 'react';\nimport BusinessList from '../BusinessList/BusinessList';\nimport Searchbar from '../Searchbar/Searchbar';\nimport './App.css';\nimport Yelp from '../../util/Yelp';\nimport Randomizer from '../../util/Randomizer';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n\n  }\n  searchYelp(term, location, price, sortBy) {\n    Yelp.search(term, location, price, sortBy).then(businesses => { //api fetch method from yelp\n      let tempBusinesses = Randomizer.randomize(businesses); //helper method imported from util\n      this.setState({businesses: tempBusinesses});\n    });\n  }\n    render(){\n      return(\n        <div className=\"App\">\n          <h1>Indecisive Eater</h1>\n          <Searchbar searchYelp={this.searchYelp} />\n          <BusinessList businesses={this.state.businesses} />\n        </div>\n      )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}